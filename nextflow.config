/*
 * -------------------------------------------------
 *  Biome Nextflow RNA-seq config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  version = "1.1" // Pipeline version
  container = 'skptic/steadyflow:latest' // Container slug. Stable releases should specify release tag!
  nf_required_version = '0.30.0' // Minimum version of nextflow required

  outdir = "NF_OUT"
  unmappedPath = outdir+"/unmapped"
  sras = false
    
  clusterOptions = false
  count = false
  flip = false
  flipR2 = false
  email=false
  help = false
  nf_required_version = nf_required_version


  fromUnmapped = true
  singleEnd = false
  saveAllfq = false
  savefq = false
  saveTrim = false
  skipBAM = false
  skipMultiQC = false
  skipRSeQC = false
  threadfqdump = false
  version = version    
}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  slurmsummit {
    workDir = params.workdir
    includeConfig 'conf/base.config'
    includeConfig 'conf/slurmsummit.config'
  }
  slurm {
    workDir = params.workdir
    includeConfig 'conf/base.config'
    includeConfig 'conf/slurm.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
    file = "${params.outdir}/pipeline_info/biome_pipeline_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/biome_pipeline_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/biome_pipeline_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/biome_pipeline_dag.svg"
}

manifest {
  homePage = 'https://github.com/Dowell-Lab/RNAseq-Biome'
  description = 'This pipeline processes RNA-seq transcription for Biome analysis using Nextflow'
  mainScript = 'biome.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
